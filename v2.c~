#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>

int main()
{
    char *args[] = {NULL};  // Placeholder for command arguments
    char *env[] = {NULL};   // Placeholder for environment variables

    while (1) {
        printf("Shell> ");

        char command[100];
        fgets(command, sizeof(command), stdin);

        // Remove trailing newline character from the command
        if (command[strlen(command) - 1] == '\n') {
            command[strlen(command) - 1] = '\0';
        }

        // Exit the shell if the command is "exit"
        if (strcmp(command, "exit") == 0) {
            printf("Exiting the shell.\n");
            break;
        }

        // Fork a child process
        pid_t pid = fork();

        if (pid == 0) {
            // Child process

            // Execute the command using execve
            if (execve(command, args, env) == -1) {
                perror("execve");
                exit(1);
            }
        } else if (pid > 0) {
            // Parent process

            // Wait for the child process to complete
            wait(NULL);
        } else {
            // Error forking the process
            perror("fork");
            exit(1);
        }
    }

    return 0;
}
